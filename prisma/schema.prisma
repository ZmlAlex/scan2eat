// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  restaurant    Restaurant[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum CurrencyCode {
  RUB
  USD
  EUR
  GBP
}

model Currency {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  code      CurrencyCode @unique
  title     String

  restaurant Restaurant[]
}

model Restaurant {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userId       String
  currencyCode CurrencyCode
  workingHours String
  logoUrl      String

  restaurantI18N RestaurantI18N[]
  menu           Menu[]
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  currency     Currency     @relation(fields: [currencyCode], references: [code], onDelete: Cascade)
}

enum RestaurantTranslationFields {
  name
  description
  address
}

model RestaurantI18N {
  id           String                      @id @default(cuid())
  createdAt    DateTime                    @default(now())
  updatedAt    DateTime                    @updatedAt
  languageCode LanguageCode                @default(russian)
  fieldName    RestaurantTranslationFields // fields to be translated
  translation  String // translation text goes here
  restaurantId String 

  restaurant   Restaurant                  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  language     Language                    @relation(fields: [languageCode], references: [code], onDelete: Cascade)
}

model Menu {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurantId String

  category Category[]
  product  Product[]
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  menuId    String

  product      Product[]
  categoryI18N CategoryI18N[]
  menu      Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
}

enum CategoryTranslationFields {
  name
}

model CategoryI18N {
  id           String                    @id @default(cuid())
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  languageCode LanguageCode              @default(russian)
  fieldName    CategoryTranslationFields // fields to be translated
  translation  String // translation text goes here
  categoryId   String

  category     Category                  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  language     Language                  @relation(fields: [languageCode], references: [code], onDelete: Cascade)

}

model Product {
  id               String        @id @default(cuid())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  menuId           String
  categoryId       String
  isEnabled        Boolean @default(true)
  price            Int
  measurementUnit  String
  measurementValue String
  imageUrl         String

  productI18N      ProductI18N[]
  menu             Menu          @relation(fields: [menuId], references: [id], onDelete: Cascade)
  category         Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

enum ProductTranslationFields {
  name
  description
}

model ProductI18N {
  id           String                   @id @default(cuid())
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  languageCode LanguageCode             @default(russian)
  fieldName    ProductTranslationFields // fields to be translated
  translation  String // translation text goes here
  productId    String 

  product      Product                  @relation(fields: [productId], references: [id], onDelete: Cascade)
  language     Language                 @relation(fields: [languageCode], references: [code], onDelete: Cascade)
}

enum LanguageTitle {
  english
  russian
}

enum LanguageCode {
  english @map("en-us")
  russian @map("ru-ru")
}

model Language {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  title     LanguageTitle
  code      LanguageCode  @unique

  categoryI18N   CategoryI18N[]
  productI18N    ProductI18N[]
  restaurantI18N RestaurantI18N[]
}
